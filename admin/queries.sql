-- Create DB
CREATE SCHEMA `blog` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;

-- USER TABLE
-- Id	The unique id to identify the user.
-- First Name	The first name of the user.
-- Middle Name	The middle name of the user.
-- Last Name	The last name of the user.
-- Mobile	The mobile number of the user. It can be used for login and registration purposes.
-- Email	The email of the user. It can be used for login and registration purposes.
-- Password Hash	The password hash generated by the appropriate algorithm. We must avoid storing plain passwords.
-- Registered At	This column can be used to calculate the life of the user with the blog.
-- Last Login	It can be used to identify the last login of the user.
-- Intro	The brief introduction of the Author to be displayed on each post.
-- Profile	The author details to be displayed on the Author Page.
CREATE TABLE `blog`.`user` (
  `id` BIGINT NOT NULL AUTO_INCREMENT,
  `firstName` VARCHAR(50) NULL DEFAULT NULL,
  `middleName` VARCHAR(50) NULL DEFAULT NULL,
  `lastName` VARCHAR(50) NULL DEFAULT NULL,
  `mobile` VARCHAR(15) NULL,
  `email` VARCHAR(50) NULL,
  `passwordHash` VARCHAR(32) NOT NULL,
  `registeredAt` DATETIME NOT NULL,
  `lastLogin` DATETIME NULL DEFAULT NULL,
  `intro` TINYTEXT NULL DEFAULT NULL,
  `profile` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_mobile` (`mobile` ASC),
  UNIQUE INDEX `uq_email` (`email` ASC) );

--POST TABLE
-- Post Table
-- Below mentioned is the description of all the columns of the Post Table.
-- Id	The unique id to identify the post.
-- Author Id	The author id to identify the post author.
-- Parent Id	The parent id to identify the parent post. It can be used to form the table of content of the parent post of series.
-- Title	The post title to be displayed on the Post Page and the lists.
-- Meta Title	The meta title to be used for browser title and SEO.
-- Slug	The post slug to form the URL.
-- Summary	The summary of the post to mention the key highlights.
-- Published	It can be used to identify whether the post is publicly available.
-- Created At	It stores the date and time at which the post is created.
-- Updated At	It stores the date and time at which the post is updated.
-- Published At	It stores the date and time at which the post is published.
-- Content	The column used to store the post data.
CREATE TABLE `blog`.`post` (
  `id` BIGINT NOT NULL AUTO_INCREMENT,
  `authorId` BIGINT NOT NULL,
  `parentId` BIGINT NULL DEFAULT NULL,
  `title` VARCHAR(75) NOT NULL,
  `metaTitle` VARCHAR(100) NULL,
  `slug` VARCHAR(100) NOT NULL,
  `summary` TINYTEXT NULL,
  `published` TINYINT(1) NOT NULL DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `updatedAt` DATETIME NULL DEFAULT NULL,
  `publishedAt` DATETIME NULL DEFAULT NULL,
  `content` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `uq_slug` (`slug` ASC),
  INDEX `idx_post_user` (`authorId` ASC),
  CONSTRAINT `fk_post_user`
    FOREIGN KEY (`authorId`)
    REFERENCES `blog`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);
--ALTER POST TABLE
ALTER TABLE `blog`.`post` 
ADD INDEX `idx_post_parent` (`parentId` ASC);
ALTER TABLE `blog`.`post` 
ADD CONSTRAINT `fk_post_parent`
  FOREIGN KEY (`parentId`)
  REFERENCES `blog`.`post` (`id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;

-- POST META TABLE
-- The Post Meta Table can be used to store additional information of a post including the post banner URL etc.
-- Id	The unique id to identify the post meta.
-- Post Id	The post id to identify the parent post.
-- Key	The key identifying the meta.
-- Content	The column used to store the post data.
CREATE TABLE `blog`.`post_meta` (
  `id` BIGINT NOT NULL AUTO_INCREMENT,
  `postId` BIGINT NOT NULL,
  `meta_key` VARCHAR(50) NOT NULL,
  `content` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `idx_meta_post` (`postId` ASC),
  UNIQUE INDEX `uq_post_meta` (`postId` ASC, `meta_key` ASC),
  CONSTRAINT `fk_meta_post`
    FOREIGN KEY (`postId`)
    REFERENCES `blog`.`post` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;

--POST COMMENT TABLE
-- Id	The unique id to identify the post comment.
-- Post Id	The post id to identify the parent post.
-- Parent Id	The parent id to identify the parent comment.
-- Title	The comment title.
-- Published	It can be used to identify whether the comment is publicly available.
-- Created At	It stores the date and time at which the comment is submitted.
-- Published At	It stores the date and time at which the comment is published.
-- Content	The column used to store the comment data.
CREATE TABLE `blog`.`post_comment` (
  `id` BIGINT NOT NULL AUTO_INCREMENT,
  `postId` BIGINT NOT NULL,
  `parentId` BIGINT NULL DEFAULT NULL,
  `title` VARCHAR(100) NOT NULL,
  `published` TINYINT(1) NOT NULL DEFAULT 0,
  `createdAt` DATETIME NOT NULL,
  `publishedAt` DATETIME NULL DEFAULT NULL,
  `content` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `idx_comment_post` (`postId` ASC),
  CONSTRAINT `fk_comment_post`
    FOREIGN KEY (`postId`)
    REFERENCES `blog`.`post` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);
-- ALTER POST COMMENT TABLE
ALTER TABLE `blog`.`post_comment` 
ADD INDEX `idx_comment_parent` (`parentId` ASC);
ALTER TABLE `blog`.`post_comment` 
ADD CONSTRAINT `fk_comment_parent`
  FOREIGN KEY (`parentId`)
  REFERENCES `blog`.`post_comment` (`id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;

-- CATEGORY TABLE AND POST CATEGORY TABLE
-- The Category Table and Post Category Table will store the post categories and their mappings.
-- Id	The unique id to identify the category.
-- Parent Id	The parent id to identify the parent category.
-- Title	The category title.
-- Meta Title	The meta title to be used for browser title and SEO.
-- Slug	The category slug to form the URL.
-- Content	The column used to store the category data.
-- CATEGORY TABLE BELOW
CREATE TABLE `blog`.`category` (
  `id` BIGINT NOT NULL AUTO_INCREMENT,
  `parentId` BIGINT NULL DEFAULT NULL,
  `title` VARCHAR(75) NOT NULL,
  `metaTitle` VARCHAR(100) NULL DEFAULT NULL,
  `slug` VARCHAR(100) NOT NULL,
  `content` TEXT NULL DEFAULT NULL,
  PRIMARY KEY (`id`));
  -- CONSTRAINT 1
ALTER TABLE `blog`.`category` 
ADD INDEX `idx_category_parent` (`parentId` ASC);
-- CONSTRAINT 2
ALTER TABLE `blog`.`category` 
ADD CONSTRAINT `fk_category_parent`
  FOREIGN KEY (`parentId`)
  REFERENCES `blog`.`category` (`id`)
  ON DELETE NO ACTION
  ON UPDATE NO ACTION;

-- POST CATEGORY TABLE
-- Post Id	The post id to identify the post.
-- Category Id	The category id to identify the category.
CREATE TABLE `blog`.`post_category` (
  `postId` BIGINT NOT NULL,
  `categoryId` BIGINT NOT NULL,
  PRIMARY KEY (`postId`, `categoryId`),
  INDEX `idx_pc_category` (`categoryId` ASC),
  INDEX `idx_pc_post` (`postId` ASC),
  CONSTRAINT `fk_pc_post`
    FOREIGN KEY (`postId`)
    REFERENCES `blog`.`post` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_pc_category`
    FOREIGN KEY (`categoryId`)
    REFERENCES `blog`.`category` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);